package eg.edu.alexu.csd.oop.jdbc.cs73;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;

import eg.edu.alexu.csd.oop.db.cs73.Model.DatabaseImp;

public class StatementImp implements Statement {
	private final DatabaseImp dbManager = DatabaseImp.getUniqueInstance();
	private boolean closed = false;
	private ArrayList<String> commands = new ArrayList<>();
	private Connection connection;
	private int queryTimeout = Integer.MAX_VALUE; // INF
	private DBLogger logger;
	private ResultSet currentResultSet;
	private int updatedCount;

	public StatementImp(final Connection connection) {
		logger = DBLogger.getInstance();
		logger.log.info("Statement generated.");
		this.connection = connection;
	}

	public StatementImp(final String path, final Connection connection) {
		logger = DBLogger.getInstance();
		logger.log.info("Statement generated.");
		this.connection = connection;
		dbManager.setMainDirectory(path);
	}

	@Override
	public void addBatch(final String sql) throws SQLException {
		if (closed) {
			throw new SQLException("The statement has been closed.");
		}
		if (sql == null) {
			throw new SQLException();
		}
		if (!sql.trim().startsWith("insert") && !sql.trim().startsWith("update") && !sql.trim().startsWith("delete")
				&& !sql.trim().startsWith("create") && !sql.trim().startsWith("drop")) {
			logger.log.info("Commands unsupported.");
			throw new SQLException("INSERT, UPDATE or DELETE queries only");
		}
		logger.log.info("Adding accepted batch of commands..");
		commands.add(sql);
	}

	@Override
	public void cancel() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void clearBatch() throws SQLException {
		if (closed) {
			throw new SQLException("The statement has been closed.");
		}
		logger.log.info("Clearing batch of commands.");
		commands = new ArrayList<>();
	}

	@Override
	public void clearWarnings() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void close() throws SQLException {
		if (closed) {
			throw new SQLException();
		}
		closed = true;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(final String sql) throws SQLException {
		if (!closed) {
			logger.log.info("Executing given command..");
			if (sql.trim().split("\\s+")[0].equalsIgnoreCase("create")
					|| sql.trim().split("\\s+")[0].equalsIgnoreCase("drop")) {
				return dbManager.executeStructureQuery(sql);
			} else if (sql.trim().split("\\s+")[0].equalsIgnoreCase("insert")
					|| sql.trim().split("\\s+")[0].equalsIgnoreCase("delete")
					|| sql.trim().split("\\s+")[0].equalsIgnoreCase("update")) {
				final int result = executeUpdate(sql);
				return result > 0;
			} else if (sql.trim().split("\\s+")[0].equalsIgnoreCase("select")) {
				logger.log.info("Generating result of select query..");
				final ResultSet result = executeQuery(sql);
				return result.getMetaData().getColumnCount() > 0;
			}
		}
		throw new SQLException();
	}

	@Override
	public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(final String sql, final String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		if (closed) {
			throw new SQLException("The statement has been closed.");
		}
		logger.log.info("Executing batch of commands..");
		final int[] results = new int[commands.size()];
		int i = 0;
		for (final String command : commands) {
			if (!command.trim().startsWith("create") && !command.trim().startsWith("drop")) {
				results[i] = executeUpdate(command);
			} else {
				results[i] = 0;
			}
			i++;
		}
		return results;
	}

	@Override
	public ResultSet executeQuery(final String sql) throws SQLException {
		if (!closed) {
			logger.log.info("Fetching ResultSet data..");
			final Object[][] table = dbManager.executeQuery(sql);
			final String[][] columns = dbManager.getColumnsInfo(sql);
			final String tableName = dbManager.getTableName(sql);
			currentResultSet = new ResultsetImp(table, columns, tableName, this);
			return currentResultSet;
		}
		throw new SQLException();
	}

	@Override
	public int executeUpdate(final String sql) throws SQLException {
		if (!closed) {
			logger.log.info("Executing given update query..");
			updatedCount = dbManager.executeUpdateQuery(sql);
			return updatedCount;
		}
		throw new SQLException();
	}

	@Override
	public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public Connection getConnection() throws SQLException {
		if (closed) {
			throw new SQLException("The statement has been closed.");
		}
		return connection;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getFetchSize() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getMaxRows() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean getMoreResults(final int current) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		if (closed) {
			throw new SQLException("The statement has been closed.");
		}
		return queryTimeout;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return currentResultSet;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getResultSetType() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return updatedCount;
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isClosed() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isWrapperFor(final Class<?> arg0) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setCursorName(final String name) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setEscapeProcessing(final boolean enable) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setFetchDirection(final int direction) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setFetchSize(final int rows) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setMaxFieldSize(final int max) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setMaxRows(final int max) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setPoolable(final boolean poolable) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setQueryTimeout(final int seconds) throws SQLException {
		if (closed) {
			throw new SQLException("The statement has been closed.");
		}
		if (seconds < 0) {
			throw new SQLException("Invalid Value.");
		}
		logger.log.info("Setting query timeout to " + seconds + " seconds");
		queryTimeout = seconds;
	}

	@Override
	public <T> T unwrap(final Class<T> arg0) throws SQLException {
		throw new UnsupportedOperationException();
	}

}
